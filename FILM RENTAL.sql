USE FILM_RENTAL;
SHOW TABLES;

SELECT * FROM ACTOR;
SELECT * FROM ADDRESS;
SELECT * FROM CATEGORY;
SELECT * FROM CITY;
SELECT * FROM COUNTRY;
SELECT * FROM CUSTOMER;
SELECT * FROM FILM;
SELECT * FROM FILM_ACTOR;
SELECT * FROM FILM_CATEGORY;
SELECT * FROM INVENTORY;
SELECT * FROM LANGUAGE;
SELECT * FROM PAYMENT;
SELECT * FROM RENTAL;
SELECT * FROM STAFF;
SELECT * FROM STORE;

# 1. TOTAL REVENUE GENERATED FROM ALL RENTAL
SELECT SUM(P.AMOUNT) AS TOTAL_REVENUE
FROM RENTAL R
JOIN PAYMENT P ON R.RENTAL_ID=P.RENTAL_ID;

# 2. RENTALS IN EACH MONTH
SELECT EXTRACT(MONTH FROM RENTAL_DATE) AS MONTH_NAME,
COUNT(*) as RENTAL_COUNT FROM RENTAL
GROUP BY EXTRACT(MONTH FROM RENTAL_DATE);

# 3. RENTAL RATE OF FILM WITH LONGEST LENGTH
SELECT MAX(LENGTH(TITLE)) FROM FILM;
SELECT TITLE,RENTAL_RATE FROM FILM WHERE LENGTH(TITLE)=27;

# 4. AVERAGE RENTAL RATE OF FILMS THAT WERE TAKEN FROM THE LAST 30 DAYS
SELECT AVG(RENTAL_RATE) FROM FILM WHERE FILM_ID IN
(SELECT FILM_ID FROM INVENTORY WHERE INVENTORY_ID IN
(SELECT INVENTORY_ID FROM RENTAL WHERE RENTAL_DATE>=DATE_SUB('2005-05-05 22:04:30',INTERVAL 30 DAY)));

# 5. MOST POPULAR CATEGORY OF FILMS IN TERMS OF RENTAL
SELECT c.name AS category_name, COUNT(r.rental_id) AS rental_count
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY c.name
ORDER BY rental_count DESC
LIMIT 1;

# 6. LONGEST MOVIE DURATION OF FILMS WHICH ARE NOT RENTED
SELECT MAX(film.length) longest_duration
FROM film 
LEFT JOIN inventory  ON film.film_id = inventory.film_id
LEFT JOIN rental  ON inventory.inventory_id = rental.inventory_id
WHERE rental.rental_id IS NULL;

# 7. AVERAGE RENTAL RATE FOR FILMS CATEGORY WISE
SELECT AVG(f.RENTAL_RATE),fc.CATEGORY_ID FROM FILM f
LEFT JOIN FILM_CATEGORY fc
ON f.FILM_ID=fc.FILM_ID
GROUP BY fc.CATEGORY_ID;

# 8. TOTAL REVENUE GENERATED FROM RENTALS FOR EACH ACTOR
SELECT a.actor_id,CONCAT(a.first_name, ' ', a.last_name) AS actor_name,
SUM(p.amount) AS total_revenue
FROM actor a
JOIN film_actor fa ON a.actor_id = fa.actor_id
JOIN film f ON fa.film_id = f.film_id
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN payment p ON r.rental_id = p.rental_id
GROUP BY a.actor_id, actor_name
ORDER BY total_revenue DESC;

# 9. SHOW ALL THE ACTRESSES WHO WORKED IN A FILM HAVING A "WRESTLER" IN THE DESCRIPTION
SELECT DISTINCT a.actor_id, a.first_name, a.last_name
FROM actor a
JOIN film_actor fa ON a.actor_id = fa.actor_id
JOIN film f ON fa.film_id = f.film_id
WHERE LOWER(f.description) LIKE '%wrestler%'
ORDER BY a.last_name, a.first_name;
 
# 10. WHICH CUSTOMERS HAVE RENTED THE SAME FILM MLORE THAN ONCE
select distinct c.customer_id, c.first_name, c.last_name, f.title, count(*) as rent_count
from customer c
join rental r on c.customer_id = r.customer_id
join inventory i on r.inventory_id = i.inventory_id
join film f on i.film_id = f.film_id
GROUP BY c.customer_id, f.title
HAVING COUNT(*) > 1
ORDER BY c.last_name, c.first_name, rent_count DESC;

# 11. HOW MANY FILMS IN THE COMEDY CATEGORY HAVE A RENTAL RATE HIGHER THAN AVERAGE RENTAL RATE
select count(*) as films
from film f
join film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
WHERE c.name = 'Comedy'
AND f.rental_rate > (SELECT AVG(rental_rate) FROM film);
    
# 12. WHICH FILMS HAVE BEEN RENTED THE MOST BY CUSTOMERS LIVING IN EACH CITY
SELECT ci.city_id,
ci.city, f.film_id,f.title AS film_title,
COUNT(*) AS rental_count
FROM rental r
JOIN customer cu ON r.customer_id = cu.customer_id
JOIN address a ON cu.address_id = a.address_id
JOIN city ci ON a.city_id = ci.city_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
GROUP BY ci.city_id, f.film_id
HAVING rental_count = (
SELECT MAX(rental_counts.max_rentals)
FROM(SELECT COUNT(*) AS max_rentals
FROM rental r2
JOIN customer cu2 ON r2.customer_id = cu2.customer_id
JOIN address a2 ON cu2.address_id = a2.address_id
JOIN city ci2 ON a2.city_id = ci2.city_id
GROUP BY ci2.city_id, r2.inventory_id
ORDER BY max_rentals DESC
LIMIT 1) rental_counts)
ORDER BY ci.city_id, rental_count DESC;
 
 
 # 13. TOTAL AMOUNT SPENT BY CUSTOMERS WHOSE RENTAL PAYMENTS EXCEED TO $200
 SELECT CUSTOMER_ID,SUM(AMOUNT) FROM PAYMENT
 WHERE AMOUNT>200
 GROUP BY CUSTOMER_ID;
    
    
 # 14. DISPLAY THE FIELDS WHICH ARE HAVING FOREIGN KEY CONSTARINTS RELATED TO THE"RENTAL"TABLE.
SELECT COLUMN_NAME,REFERENCED_TABLE_NAME,REFERENCED_COLUMN_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE TABLE_NAME = 'rental' AND CONSTRAINT_NAME LIKE 'fk_%';


 # 15. CREATE A VIEW FOR THE TOTAL REVENUE GENERATED BY EACH STAFF MEMBER BROKEN DOWNBY STORE CITY WITH THE COUNTRY NAME   
create view total_rev_view as
select s.staff_id,ci.city_id,ci.city,co.country,
sum(p.amount) as total_rev
from staff s
join store st on s.store_id = st.store_id
join address a on st.address_id = a.address_id
join city ci on a.city_id = ci.city_id
join country co on ci.country_id = co.country_id
JOIN payment p ON s.staff_id = p.staff_id
group by s.staff_id, ci.city_id, ci.city, co.country;

select * from total_rev_view;
    
    
 # 16. CREATING VIEW BASED ON RENTAL INFORMATION
 CREATE VIEW RENTAL_INFO AS
 SELECT R.RENTAL_DATE VISITING_DAY,C.FIRST_NAME CUSTOMER_NAME,F.TITLE,
 DATEDIFF(R.RETURN_DATE,R.RENTAL_DATE),P.AMOUNT,(P.AMOUNT/(SELECT SUM(AMOUNT) FROM PAYMENT WHERE CUSTOMER_ID=R.CUSTOMER_ID))* 100 AS PERCENTAGE
 FROM RENTAL R 
 JOIN CUSTOMER C ON R.CUSTOMER_ID=C.CUSTOMER_ID
 JOIN INVENTORY I ON R.INVENTORY_ID=I.INVENTORY_ID
 JOIN FILM F ON I.FILM_ID=F.FILM_ID
 JOIN PAYMENT P ON R.RENTAL_ID=P.RENTAL_ID;
 
 SELECT * FROM RENTAL_INFO;
    
# 17. CUSTOMERS WHO PAID 50% OF THIER TOTAL RENTAL COSTS WITHIN ONE DAY
SELECT  distinct customer.customer_id,customer.first_name FROM customer
JOIN payment ON customer.customer_id = payment.customer_id
JOIN rental ON payment.rental_id = rental.rental_id
WHERE payment.amount>=payment.amount* 0.5 AND DATEDIFF(payment.payment_date, rental.rental_date)=0;







